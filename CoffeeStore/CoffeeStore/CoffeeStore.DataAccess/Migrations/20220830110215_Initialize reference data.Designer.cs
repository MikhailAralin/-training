// <auto-generated />
using System;
using CoffeeStore.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeStore.DataAccess.Migrations
{
    [DbContext(typeof(CoffeeStoreContext))]
    [Migration("20220830110215_Initialize reference data")]
    partial class Initializereferencedata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<short>("OperationType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OperationType" }, "idx__operations__operation_type");

                    b.HasIndex(new[] { "ProductId" }, "idx__operations_product_id");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.OperationType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("OperationType", (string)null);
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("OrderStatus")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("OrderStatus");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Sum")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.OrderStatus", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.Price", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VendorPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "Date");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NomenclatureNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.ProductOperation", b =>
                {
                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NomenclatureNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<short>("OperationType")
                        .HasColumnType("smallint");

                    b.ToView("ProductOperations");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.ProductProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("ValueType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductProperties");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.ProductPropertyValue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EnumValueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("NumericValue")
                        .HasColumnType("numeric(28,6)");

                    b.Property<string>("StringValue")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id", "PropertyId", "ProductId");

                    b.HasIndex("EnumValueId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PropertyId");

                    b.ToTable("ProductPropertyValues");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.PropertyEnum", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("ValueType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("PropertyEnums");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.PropertyEnumValue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("NumericValue")
                        .HasColumnType("numeric(28,6)");

                    b.Property<string>("StringValue")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("EnumId");

                    b.ToTable("PropertyEnumValues");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.PropertyValueType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PropertyValueTypes");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.Operation", b =>
                {
                    b.HasOne("CoffeeStore.DataAccess.Models.OperationType", "OperationTypeNavigation")
                        .WithMany("Operations")
                        .HasForeignKey("OperationType")
                        .IsRequired()
                        .HasConstraintName("FK_Operations_Operations");

                    b.HasOne("CoffeeStore.DataAccess.Models.Product", "Product")
                        .WithMany("Operations")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Operations_Products");

                    b.Navigation("OperationTypeNavigation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.Order", b =>
                {
                    b.HasOne("CoffeeStore.DataAccess.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Clients");

                    b.HasOne("CoffeeStore.DataAccess.Models.OrderStatus", "OrderStatusNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatus")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_OrderStatuses");

                    b.Navigation("Client");

                    b.Navigation("OrderStatusNavigation");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.OrderDetail", b =>
                {
                    b.HasOne("CoffeeStore.DataAccess.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetails_Orders");

                    b.HasOne("CoffeeStore.DataAccess.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetails_Products");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.Price", b =>
                {
                    b.HasOne("CoffeeStore.DataAccess.Models.Product", "Product")
                        .WithMany("Prices")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Prices_Products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.Product", b =>
                {
                    b.HasOne("CoffeeStore.DataAccess.Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_ProductTypes");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.ProductProperty", b =>
                {
                    b.HasOne("CoffeeStore.DataAccess.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductProperties_ProductTypes");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.ProductPropertyValue", b =>
                {
                    b.HasOne("CoffeeStore.DataAccess.Models.PropertyEnumValue", "EnumValue")
                        .WithMany("ProductPropertyValues")
                        .HasForeignKey("EnumValueId")
                        .HasConstraintName("FK_ProductPropertyValues_EnumValues");

                    b.HasOne("CoffeeStore.DataAccess.Models.Product", "Product")
                        .WithMany("ProductPropertyValues")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductPropertyValues_Products");

                    b.HasOne("CoffeeStore.DataAccess.Models.ProductProperty", "Property")
                        .WithMany("ProductPropertyValues")
                        .HasForeignKey("PropertyId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductPropertyValues_ProductProperties");

                    b.Navigation("EnumValue");

                    b.Navigation("Product");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.PropertyEnumValue", b =>
                {
                    b.HasOne("CoffeeStore.DataAccess.Models.PropertyEnum", "Enum")
                        .WithMany("PropertyEnumValues")
                        .HasForeignKey("EnumId")
                        .IsRequired()
                        .HasConstraintName("FK_EnumValues_Enums");

                    b.Navigation("Enum");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.OperationType", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.Product", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("OrderDetails");

                    b.Navigation("Prices");

                    b.Navigation("ProductPropertyValues");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.ProductProperty", b =>
                {
                    b.Navigation("ProductPropertyValues");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.PropertyEnum", b =>
                {
                    b.Navigation("PropertyEnumValues");
                });

            modelBuilder.Entity("CoffeeStore.DataAccess.Models.PropertyEnumValue", b =>
                {
                    b.Navigation("ProductPropertyValues");
                });
#pragma warning restore 612, 618
        }
    }
}
